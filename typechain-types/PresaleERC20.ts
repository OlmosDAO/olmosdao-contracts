/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PresaleERC20Interface extends utils.Interface {
  contractName: "PresaleERC20";
  functions: {
    "buyToken(uint256)": FunctionFragment;
    "buyers(address)": FunctionFragment;
    "calculateAmountTokensPurchased(uint256)": FunctionFragment;
    "calculateNumberOfTokenLeft()": FunctionFragment;
    "dai()": FunctionFragment;
    "goal()": FunctionFragment;
    "goalPresale()": FunctionFragment;
    "mercy()": FunctionFragment;
    "miERC20()": FunctionFragment;
    "moveTokensToTreasury()": FunctionFragment;
    "owner()": FunctionFragment;
    "priceTokenPerDai()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buyers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calculateAmountTokensPurchased",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateNumberOfTokenLeft",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dai", values?: undefined): string;
  encodeFunctionData(functionFragment: "goal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "goalPresale",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mercy", values?: undefined): string;
  encodeFunctionData(functionFragment: "miERC20", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "moveTokensToTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceTokenPerDai",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buyToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateAmountTokensPurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateNumberOfTokenLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "goal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "goalPresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mercy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "miERC20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moveTokensToTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceTokenPerDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PresaleERC20 extends BaseContract {
  contractName: "PresaleERC20";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PresaleERC20Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyToken(
      amountDaiTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountDaiSpent: BigNumber;
        amountTokenPurchased: BigNumber;
      }
    >;

    calculateAmountTokensPurchased(
      _amountPaid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateNumberOfTokenLeft(overrides?: CallOverrides): Promise<[BigNumber]>;

    dai(overrides?: CallOverrides): Promise<[string]>;

    goal(overrides?: CallOverrides): Promise<[BigNumber]>;

    goalPresale(overrides?: CallOverrides): Promise<[boolean]>;

    mercy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    miERC20(overrides?: CallOverrides): Promise<[string]>;

    moveTokensToTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceTokenPerDai(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;
  };

  buyToken(
    amountDaiTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      amountDaiSpent: BigNumber;
      amountTokenPurchased: BigNumber;
    }
  >;

  calculateAmountTokensPurchased(
    _amountPaid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateNumberOfTokenLeft(overrides?: CallOverrides): Promise<BigNumber>;

  dai(overrides?: CallOverrides): Promise<string>;

  goal(overrides?: CallOverrides): Promise<BigNumber>;

  goalPresale(overrides?: CallOverrides): Promise<boolean>;

  mercy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  miERC20(overrides?: CallOverrides): Promise<string>;

  moveTokensToTreasury(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceTokenPerDai(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    buyToken(
      amountDaiTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    buyers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountDaiSpent: BigNumber;
        amountTokenPurchased: BigNumber;
      }
    >;

    calculateAmountTokensPurchased(
      _amountPaid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateNumberOfTokenLeft(overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<string>;

    goal(overrides?: CallOverrides): Promise<BigNumber>;

    goalPresale(overrides?: CallOverrides): Promise<boolean>;

    mercy(overrides?: CallOverrides): Promise<boolean>;

    miERC20(overrides?: CallOverrides): Promise<string>;

    moveTokensToTreasury(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceTokenPerDai(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    buyToken(
      amountDaiTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    calculateAmountTokensPurchased(
      _amountPaid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateNumberOfTokenLeft(overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<BigNumber>;

    goal(overrides?: CallOverrides): Promise<BigNumber>;

    goalPresale(overrides?: CallOverrides): Promise<BigNumber>;

    mercy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    miERC20(overrides?: CallOverrides): Promise<BigNumber>;

    moveTokensToTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceTokenPerDai(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    buyToken(
      amountDaiTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateAmountTokensPurchased(
      _amountPaid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateNumberOfTokenLeft(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    goal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    goalPresale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mercy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    miERC20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moveTokensToTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceTokenPerDai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
